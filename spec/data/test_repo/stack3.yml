---
# Stack
name: Stack1

environment: DEV

# Common referenced values
common:
  password: &password passw0rd

stack:

- node: database
  # Knife bootstrap and ssh attributes. The plugin attribute
  # is used to determine which knife plugin to use for node
  # creation. If a plugin is not provided it would be assumed
  # that the host exists.
  knife:
    plugin: vagrant
    options:
      box: chef/ubuntu-14.04
      box_url: https://vagrantcloud.com/chef/boxes/ubuntu-14.04
      memsize: 2048
      # Vagrant sets up a NAT for the VM. We need to setup a host
      # only network so the vm can talk to chef zero on host.
      subnet: 192.168.50.0/24
      identity_file: ~/.vagrant/insecure_key
      ssh_user: vagrant
      sudo: true
      # inline config to use vagrant-ohai plugin to install ohai
      # plugin to capture ip from eth1 instead of eth0 as well
      # as run an apt update.
      inline_config: |
        config.ohai.enable = true
        config.ohai.primary_nic = "eth1"
        config.vm.provision "shell", inline: "mkdir -p /etc/chef"
        config.vm.provision "shell", inline: "apt-get update"
      # bootstrap run-list. This will be replaced
      # if a node run list is provided. We run the
      # ohai cookbook to ensure that the node's
      # ipaddress is populated with the address
      # of eth1 and not the default eth0
      run_list:
      - recipe[ohai]
  depends_on:
  attributes:
    mysql:
      server_root_password: *password
      server_debian_password: *password
  run_list:
  - role[wordpress_db]
  run_on_event: <<+[common/life_cycle_events.yml][wordpress_database][run_on_event]

- node: wordpress_web
  targets:
  - database
  attributes:
    wordpress:
      db:
        name: wordpress
        host: nodes[database][0][ipaddress]
        user: wordpress
        pass: *password
  knife:
    plugin: container
    image: chef/ubuntu-14.04
    # The following docker build commands will
    # be added after the FROM directive in the
    # Dockerfile.
    inline_dockerfile: |
      RUN apt-get update
    run_list:
    - role[wordpress_web]
    # The service process launched by runit
    container_service:
      wordpress:
        command: /usr/sbin/apache2ctl -D FOREGROUND
    # The container start options. Ports will
    # be bound to dynamic ports unless specified
    # explicitly as host_port:container_port. Container
    # will always be launched in a detached state.
    # Additional options for the docker run command
    # can be specified via the 'options' key.
    container_start:
      ports:
        wordpress: 80
